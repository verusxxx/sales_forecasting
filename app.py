import sys
import os
import pandas as pd
import tempfile
import streamlit as st
import matplotlib.pyplot as plt

# –î–æ–±–∞–≤–ª—è–µ–º src/ –≤ –ø—É—Ç—å –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), "src"))

from model import load_model
from preprocessing import clean_data, feature_engineering
from forecast import forecast
from utils import calc_metrics
from visualization import plot_forecast_matplotlib  # ‚úÖ –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –≤–µ—Ä–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é

st.set_page_config(page_title="üìä –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂", layout="wide")
st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑ –ø—Ä–æ–¥–∞–∂ (–Ω–∞ 30 –∏ 7 –¥–Ω–µ–π)")

uploaded_file = st.file_uploader("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel-—Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –ø—Ä–æ–¥–∞–∂–∞–º–∏", type=["xlsx"])

def make_future_dataframe(df, periods):
    last_date = df['–î–∞—Ç–∞'].max()
    unique_combinations = df[['–ö–∞—Ç–µ–≥–æ—Ä–∏—è_—Ç–æ–≤–∞—Ä–∞', '–¢–æ–≤–∞—Ä', '–ì–æ—Ä–æ–¥', '–ì—Ä—É–ø–ø–∞_–∫–ª–∏–µ–Ω—Ç–æ–≤', '–§–æ—Ä–º–∞—Ç_—Ç–æ—á–∫–∏']].drop_duplicates()
    future_dates = pd.date_range(start=last_date + pd.Timedelta(days=1), periods=periods)
    future_df = unique_combinations.assign(key=1).merge(
        pd.DataFrame({'–î–∞—Ç–∞': future_dates, 'key': 1}), on='key'
    ).drop('key', axis=1)
    future_df['–ü—Ä–æ–¥–∞–∂–∏_–∫–≥'] = 0
    return future_df

def run_forecast(df, days):
    future_df = make_future_dataframe(df, periods=days)
    future_metadata = future_df.drop(columns=['–ü—Ä–æ–¥–∞–∂–∏_–∫–≥'])
    full_df = pd.concat([df, future_df], ignore_index=True)
    full_df = feature_engineering(full_df)

    mask_future = full_df['–î–∞—Ç–∞'] > df['–î–∞—Ç–∞'].max()
    features = [col for col in full_df.columns if col not in ['–ü—Ä–æ–¥–∞–∂–∏_–∫–≥', '–î–∞—Ç–∞']]
    X_future = full_df.loc[mask_future, features]

    model = load_model()
    preds = forecast(model, X_future)

    result = future_metadata.copy()
    result['prediction'] = preds

    # –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    truth_df = df[df['–î–∞—Ç–∞'].isin(result['–î–∞—Ç–∞'])][
        ['–î–∞—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è_—Ç–æ–≤–∞—Ä–∞', '–¢–æ–≤–∞—Ä', '–ì–æ—Ä–æ–¥', '–ì—Ä—É–ø–ø–∞_–∫–ª–∏–µ–Ω—Ç–æ–≤', '–§–æ—Ä–º–∞—Ç_—Ç–æ—á–∫–∏', '–ü—Ä–æ–¥–∞–∂–∏_–∫–≥']
    ]
    result = result.merge(truth_df, on=['–î–∞—Ç–∞', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è_—Ç–æ–≤–∞—Ä–∞', '–¢–æ–≤–∞—Ä', '–ì–æ—Ä–æ–¥', '–ì—Ä—É–ø–ø–∞_–∫–ª–∏–µ–Ω—Ç–æ–≤', '–§–æ—Ä–º–∞—Ç_—Ç–æ—á–∫–∏'], how='left')

    return result

if uploaded_file:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".xlsx") as tmp:
        tmp.write(uploaded_file.read())
        file_path = tmp.name

    df = pd.read_excel(file_path)

    df = df.rename(columns={
        '–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è_—Ç–æ–≤–∞—Ä–∞',
        '–ì—Ä—É–ø–ø–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤': '–ì—Ä—É–ø–ø–∞_–∫–ª–∏–µ–Ω—Ç–æ–≤',
        '–§–æ—Ä–º–∞—Ç —Ç–æ—á–∫–∏': '–§–æ—Ä–º–∞—Ç_—Ç–æ—á–∫–∏',
        '–ü—Ä–æ–¥–∞–∂–∏, –∫–≥': '–ü—Ä–æ–¥–∞–∂–∏_–∫–≥'
    })

    st.subheader("üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    st.dataframe(df.head())

    df = clean_data(df)

    # ==== –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π ====
    st.header("üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 30 –¥–Ω–µ–π")
    forecast_30 = run_forecast(df, days=30)
    st.dataframe(forecast_30)

    csv_30 = forecast_30.to_csv(index=False).encode('utf-8-sig')
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 30 –¥–Ω–µ–π", csv_30, file_name="forecast_next_30_days.csv")

    st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 30 –¥–Ω–µ–π")
    with tempfile.NamedTemporaryFile(suffix=".csv", delete=False) as tmp_csv:
        forecast_30.to_csv(tmp_csv.name, index=False)
        tmp_csv.flush()
        plot_forecast_matplotlib(tmp_csv.name)
        st.pyplot(plt.gcf())

    if '–ü—Ä–æ–¥–∞–∂–∏_–∫–≥' in forecast_30.columns and forecast_30['–ü—Ä–æ–¥–∞–∂–∏_–∫–≥'].notna().any():
        y_true_30 = forecast_30['–ü—Ä–æ–¥–∞–∂–∏_–∫–≥'].fillna(0)
        y_pred_30 = forecast_30['prediction']
        metrics_30 = calc_metrics(y_true_30, y_pred_30)

        st.markdown("#### üß™ –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ 30 –¥–Ω–µ–π:")
        st.markdown(f"- MAE: `{metrics_30['MAE']:.2f}`")
        st.markdown(f"- RMSE: `{metrics_30['RMSE']:.2f}`")
        st.markdown(f"- MAPE: `{metrics_30['MAPE']:.2f}%`" if not pd.isna(metrics_30['MAPE']) else "- MAPE: ‚Äî")

    # ==== –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π ====
    st.header("üìÜ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ 7 –¥–Ω–µ–π")
    forecast_7 = run_forecast(df, days=7)
    st.dataframe(forecast_7)

    csv_7 = forecast_7.to_csv(index=False).encode('utf-8-sig')
    st.download_button("üì• –°–∫–∞—á–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 7 –¥–Ω–µ–π", csv_7, file_name="forecast_next_7_days.csv")

    st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ 7 –¥–Ω–µ–π")
    with tempfile.NamedTemporaryFile(suffix=".csv", delete=False) as tmp_csv:
        forecast_7.to_csv(tmp_csv.name, index=False)
        tmp_csv.flush()
        plot_forecast_matplotlib(tmp_csv.name)
        st.pyplot(plt.gcf())

    if '–ü—Ä–æ–¥–∞–∂–∏_–∫–≥' in forecast_7.columns and forecast_7['–ü—Ä–æ–¥–∞–∂–∏_–∫–≥'].notna().any():
        y_true_7 = forecast_7['–ü—Ä–æ–¥–∞–∂–∏_–∫–≥'].fillna(0)
        y_pred_7 = forecast_7['prediction']
        metrics_7 = calc_metrics(y_true_7, y_pred_7)

        st.markdown("#### üß™ –ú–µ—Ç—Ä–∏–∫–∏ –Ω–∞ 7 –¥–Ω–µ–π:")
        st.markdown(f"- MAE: `{metrics_7['MAE']:.2f}`")
        st.markdown(f"- RMSE: `{metrics_7['RMSE']:.2f}`")
        st.markdown(f"- MAPE: `{metrics_7['MAPE']:.2f}%`" if not pd.isna(metrics_7['MAPE']) else "- MAPE: ‚Äî")
